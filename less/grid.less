// ==========================================================================
// Grid
// ==========================================================================
// Provides:
//     .initializeGrid ();
//     .updateGrid (@grid-size);
//     .gridMods (@grid-size);
// ==========================================================================

//
// In the grid initialization we set the rules that are not to be overwritten
// in the stylesheet, which gives them a special standing.
// The grid takes advantage of behaviour of inline-block elements in the
// browser. It is convenient to set box-sizing to border-box to some classes
// because we operate with their width and padding in the next.
// Since whitespace in the markup breaks the grid consisting of inline blocks
// with precisely defined width, we need to reduce the font size of the grid
// to 0 (1) and then set it back to its original value in grid items (2). As
// rem units are not supported in legacy browsers, we also need to define
// a fallback using absolute units (3).
// If not overwritten with a grid class a grid item has a full width (4).
// With the same principle the grid is aligned to the left by default (5),
// top (6) and following the order as in the markup (7).
// --------------------------------------------------------------------------
.initializeGrid () {

    .wrapper {
        margin-right: auto;
        margin-left: auto;
        -webkit-box-sizing: border-box;
           -moz-box-sizing: border-box;
                box-sizing: border-box;
    }

    .grid {
        font-size: 0; // (1)
        line-height: 1;
        list-style: none;
        margin: 0;
        padding: 0;

        &__item {
            display: inline-block;
            width: 100%;                         // (4)
            font-size: @root-font-size-absolute; // (3)
            font-size: 1rem;                     // (2)
            line-height: @base-line-height;
            text-align: left;                    // (5)
            vertical-align: top;                 // (6)
            direction: ltr;                      // (7)
            -webkit-box-sizing: border-box;
               -moz-box-sizing: border-box;
                    box-sizing: border-box;
        }
    }
}

//
// The grid is expected to change at many breakpoints. At each time calling
// this to recalculate the correct margins and paddings.
// --------------------------------------------------------------------------
.updateGrid (@grid-size) {

    @gutter-width: extract(@grid-size, 3);

    .grid {
        margin-right: (@gutter-width / -2);
        margin-left: (@gutter-width / -2);
        &__item {
            padding-right: (@gutter-width / 2);
            padding-left: (@gutter-width / 2);
        }
    }

    .freshenGrid();

    .wrapper {
        padding-right: (@gutter-width / 2);
        padding-left: (@gutter-width / 2);
    }
}

//
// Makes sure grid item are visible at each breakpoint by default
// --------------------------------------------------------------------------
.freshenGrid () {
    .grid__item {
        display: inline-block;
    }
}

//
// All special grid features, or as we call them - modifications, can be set
// or reset to the default at any device independently.
// --------------------------------------------------------------------------
.modsOfGrid (@grid-size) {

    @modifier: extract(@grid-size, 4);

    .grid {
        // Obverse
        &--obv@{modifier} {
            direction: ltr;
        }

        // Reverse
        &--rev@{modifier} {
            direction: rtl;
        }

        // Left
        &--left@{modifier} {
            text-align: left;
        }

        // Right
        &--right@{modifier} {
            text-align: right;
        }

        // Center
        &--center@{modifier} {
            text-align: center;
        }

        // Top
        &--top@{modifier} {
            > .grid__item {
                vertical-align: top;
            }
        }

        // Middle
        &--middle@{modifier} {
            > .grid__item {
                vertical-align: middle;
            }
        }

        // Bottom
        &--bottom@{modifier} {
            > .grid__item {
                vertical-align: bottom;
            }
        }

    }
}

